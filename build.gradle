plugins {
    id 'java'
}

group = 'org.threadmonitoring'
version = '1.4.0'
java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}
repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.bytebuddy:byte-buddy:1.15.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.3'
    implementation 'org.ow2.asm:asm:9.8'
    implementation 'org.ow2.asm:asm-commons:9.8'
    implementation project(':thread-agent-api')
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

task copyConfig(type: Copy) {
    from 'src/main/resources/log4j2.xml'
    into "${projectDir}/threadmonitoring/configuration"

    from 'src/main/resources/conf.yml'
    into "${projectDir}/threadmonitoring/configuration"
}
task buildAllJars {
    group = 'build'
    description = 'Builds jar for all subprojects and root project'
    subprojects.each { evaluationDependsOn(it.path) }
    dependsOn subprojects.collect { sub ->
        if (sub.tasks.findByName('jar') != null) {
            sub.tasks.named('jar')
        }
    }.findAll { it != null }
    dependsOn tasks.named('jar')
}

task cleanAll(type: Delete) {
    group = 'build'
    description = 'Clean all builds and threadmonitoring folder'
    subprojects.each { sub ->
        delete sub.layout.buildDirectory
    }
    delete layout.buildDirectory
    delete file("${rootProject.projectDir}/threadmonitoring")
}

jar {
    manifest {
        attributes 'Can-Retransform-Classes': 'true'
        attributes 'Boot-Class-Path': 'thread-agent-1-0.jar'
        attributes 'Class-Path': './libs'
    }
    destinationDirectory = file("${projectDir}/threadmonitoring/lib")
    archiveFileName = "thread-agent-lib-${version}.jar"
    dependsOn copyConfig
}

task cleanLib(type: Delete) {
    delete("${projectDir}/threadmonitoring/lib")
    delete("${projectDir}/threadmonitoring/configuration")
}

clean.dependsOn cleanLib

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "${projectDir}/threadmonitoring/lib"
}

jar.finalizedBy(copyDependencies)